
$ systemctl start jenkins

jenkins server

on the port : 8080

browser

localhost:8080

Installation:

yum install java-1.8.0-openjdk-devel

https://www.jenkins.io/

sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key


yum install jenkins



For ubuntu:

Jenkins Debian Packages

This is the Debian package repository of Jenkins to automate installation and upgrade. To use this repository, first add the key to your system:

    
  curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo tee \
    /usr/share/keyrings/jenkins-keyring.asc > /dev/null
  
Then add a Jenkins apt repository entry:
    
  echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
    https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
    /etc/apt/sources.list.d/jenkins.list > /dev/null
  
Update your local package index, then finally install Jenkins:


    
  sudo apt-get update
  sudo apt-get install fontconfig openjdk-11-jre
  sudo apt-get install jenkins



********************

On Lab

localhost:8080

username: admin
Password: admin


Jenkins --> New Item --> Job1 --> Build --> shell command---> echo 'this is my first job'

Save --> click on Build Now  --> click on build number --> click on Console to see output


Jenkins with github

Continous integrations server should be able to fetch the code





*****************************************
TRIGGERS

TRIGGERS

If we want to automatically trigger a Job

Build triggers for any job:

1. Trigger builds remotely (e.g., from scripts)

Select the above very first option
give Authentication token as : token1 
any unique token number

And then copy the path provided below in this format:
JENKINS_URL/job/job4/build?token=TOKEN_NAME 


update the above url in this way:
Jenkins_URL: Curent url :http://3.140.252.165:8080
Token_NAME: token number/name provided above

Take this path and execute on anyother browser.

http://3.140.252.165:8080//job/job4/build?token=token1

Login as admin admin
you can run that job.

2. GitHub hook trigger for GITScm polling

> Select the above option

Save the job and now go to git hub

Always save the job and then only  go to git hub, perform these steps

go to the repository setting
select webhooks on left side
delete if any exisitng webhook

click on createwebhook on right side

provide following information:

Payload URL : jenkinsurl/github-webhook/ ===> http://3.140.252.165:8080/github-webhook/

Content type : select application/json

Secret: no need of any value

Which events would you like to trigger this webhook?

select first option -- Just the push event.

Select Active
click on add webhook.

now make some changes in repo,
go to jenkins--> you will see a new build has been created

3. Trigger prieodically

Create anew Job--> build trigger--> build preodically --> give */2 * * * * --> Save and build now
All build will be genrated automatically every 2 mins

4. Trigger by POLL SCM

Create a new Job-->Source code management--> Add git path

https://github.com/Sonal0409/GITHUBJENKINSDEMO

Build Triggers--> Poll SCM --> * * * * *

Build will be generated each time there is a chnage in the repository only.

*********************************



*********************

If we want to automatically trigger a Job

1. Trigger prieodically

Create anew Job--> build trigger--> build preodically --> give */2 * * * * --> Save and build now
All build will be genrated automatically every 2 mins

2. Trigger by POLL SCM

Create a new Job-->Source code management--> Add git path

https://github.com/Sonal0409/GITHUBJENKINSDEMO

Build Triggers--> Poll SCM --> * * * * *

Build will be generated each time there is a chnage in the repository only.


*************

Maven:

Build automation tool

Maven project
 > source code
 > test cases

Maven is a plugin based

2 types of plugin in Maven

 1. Core build plugins

    > Compile task --> compiler plugin
   
    > Testing ----> Surefire plugin

    > package(artifact) ==> package plugin

    > delete previous file before new build => clean plugin

    > install dependencies, packages, jars ==> install plugin

    > deploy artifact on artifactory ==> deploy

 2. Reporting plugins:

    > code review ==> pmd plugin

    > code coverage ==> cobertura

    > test reports ==> surefire reporting/ firebug



Project object module : pom.xml

  > dependency

   s/w or tools needed for code to work, test case to execute

  > plugin

    plugins are methoned in pom using which you will perform build steps


How to exeucte the plugins:
************
  Plugin Name		GOAL(command)
  compiler plugin ==> compile
  surefire plugin ==> test
  package         --> package
  pmd             ==> pmd:pmd
  cobertura       ==> cobertura:cobertura


output of maven commands will always be in a folder called as Target folder


How can we run the maven commands from jenkins:

Configure jenkins to integrate with Maven
*************
Configure
which version Java to use

Configure version of maven to be used 

























     












































